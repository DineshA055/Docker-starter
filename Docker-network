DOCKER NETWORK 

Docker offers a nature networking model. There are three common Docker network types : â€“ 

bridge networks, used within a single host, 

overlay networks, for multi-host communication,

macvlan networks which are used to connect Docker containers directly to host network interfaces.


Network drivers overview

Docker's networking subsystem is pluggable, using drivers. Several drivers exist by default, and provide core networking functionality:

    bridge: 
The default network driver. If you don't specify a driver, this is the type of network you are creating. 
Bridge networks are commonly used when your application runs in a container that needs to communicate with other containers on the same host. 
See Bridge network driver.


    host:
Remove network isolation between the container and the Docker host, and use the host's networking directly. See Host network driver.


    overlay:
Overlay networks connect multiple Docker daemons together and enable Swarm services and containers to communicate across nodes. 
This strategy removes the need to do OS-level routing. See Overlay network driver.


    ipvlan:
IPvlan networks give users total control over both IPv4 and IPv6 addressing. 
The VLAN driver builds on top of that in giving operators complete control of layer 2 
VLAN tagging and even IPvlan L3 routing for users interested in underlay network integration. See IPvlan network driver.


    macvlan: 
Macvlan networks allow you to assign a MAC address to a container, making it appear as a physical device on your network. 
The Docker daemon routes traffic to containers by their MAC addresses.
Using the macvlan driver is sometimes the best choice when dealing with legacy applications 
that expect to be directly connected to the physical network, rather than routed through the Docker host's network stack. See Macvlan network driver.


    none: 
Completely isolate a container from the host and other containers. none is not available for Swarm services. See None network driver.


    Network plugins: You can install and use third-party network plugins with Docker.


https://docs.docker.com/network/drivers/           -> More refer in offical document of docker document


EXAMPLE :- 

After installing docker in instance 

you can cmd $ ip address show


you can see :- 
1. LookBackUp ----ip -----127.0.0.1/8  ------- this one local ip can use for local host 

2. etho: ---ip----172.31.90.15/20............ Will be Lan or Vlan while you have connected to wifi network attached or LAN

3. docker0 : ip------172.17.0.1/16......network used for docker 

When am creating a container it connect the dokcer0 network ip and connect outside of network

Docker conatiner ---------------> Docker0 network----------------> Outside world connect

$ docker network ls

show result

METWORKID     Name        DRIVER     SCOPE
bdg233k      bridge       bridge    local
gddh444      host         host      local
dggd555      none         null      local 

By installing docker you will get by deafult above networks

So remaning network you need to create 

Example we can see

I want to create a nginx container 

CMD :- docker run -d --name nginx nginx        #here --name nginx   name of container and nginx (i required ngnix container so am calling nginx )
                                                     Nginx uses for reverse proxy where you use to host your website and static page you can host 
nginx image getting image or getting pull from some dockerhub repository 

Now I have created a Nginx container (ex:- nginx container does have internet connection)

To check am going inside container

CMD :- docker ps                 (find out container ID to login to conatiner)

CMD :-docker exec -it conatiner_ID bash
Bash will be open connected login In inside container :- Now I will ping www.google.com
But no response because we required network layer to connect outside (who will provide docker will provide ---We have to setup network or expose port)

CMD :- I want to check network inspect to check IP

$ docker inspect bridge    (bridge have IP for conatiner by using connect outside ) But this by default of bridge network

Now I have allowed 80 port in security group (I searched in webpage with IP:80 for nginx (But not reachable)
Beacuse Bridge just show the route to port that's it (Untill you publish the port can only able to connect)

I have to expose the port $ docker run -d 80:80 nginx           80 --> system-port and :80 is container port map and expose container port 

Now refersh the page you can see Nginx webpage will show 

------Until we have saw docker bride concept its default creating-------

Next :- HOST 

If we want to use HOST network we want create container with Host network

CMD :- $ docker create network --name nginx --network host nginx
Conatiner created 

I refreshed the port 80 for nginx webpage I killed the previous created container of Nginx with default bridge still it hosting

If we are using HOST network we don't reuqired to expose or bind or map it automatically use localhost machine through expose to port 80

$ docker inspect host 

There is no IP address because it using host network 

-------Up to we saw Host network-----

NEXT :- CUSTOM BRIDGE 

We use this custom bridge to Isolate

Why beacuse host network will be risk to be identfied 

We required to use custome bridge it create a environment know only inside containert can connect and know the ip details now host will be safe now

# How you will create a custom brisge 

#CMD :- docker network create din-net        # For custom we can provide 
   Now you can see $ docker network ls
       Additional network was created called has custom bridge 

Am using a source code example of mircoservice-k8.git

I have dockerfile and python.py written
Now build a image din-app
$ docker build -t din-app .
image was build n

Now I required to run the container with custom network 
$docker run -d -p 5000:5000 --name din-app --network din-net din-app:latest      Here --network din-net is custom network am creating for a container

$docker ps --> container is created 

$ ip address show         -> it will show the virtual ethernet shows fo docker virtual ethernet 
 Now am going inside container

$docker exe -it container_id

$bash ping www.google.com  --> now ping is working (Connected from custom bridge via docker eth0to outside for internet connection )

Am pinigng other container also $ ping nginx-cus-1    & ping nginx-cus-2 ping is working 

Now am pinging with Default created conatiner   :- ping nginx app:note   ping is not reachable  

Because network isolation cus 1 & 2 are created with din-net (custome network both container will only connect ) It will connect with default brdige network

Because Custom network doesn't know the bridge network. [Beacuse all the custom conatiners are in same subnet 172.18.0.x)

---------------Up to this we have seen custom1 network important is custom network app container will not connect with default brdige network----------------
------only custom network connect with other custom network application container----------------------------------------------------------------------


NEXT :- NONE network

None is nothing but use for completely isolated it will not connect outside and it will connect with other internal network also

$docker run -d --name nginx-din --network none   nginx

Container is created but not connect outside and isolated can use for dummy container.

----- up to we saw none network ---------

Next :- Overlay network

when we have multiple host with one host run with one container and another run two container 

For this we can use overlay (connect multiple docker Host )

Next :- MacVlan
when docker container will be assigned with Mac address it will be become like seprate device and like seprate server


                                                                                                                        






